{"version":3,"sources":["theme/index.ts","lib/boardHelper.ts","hooks/useBoard.ts","lib/sudokuBoardManager.ts","components/shared/styles.ts","components/Board/Board.styles.tsx","components/Board/Cell/styles.ts","components/Board/Cell/DisplayCell/DisplayCell.styles.tsx","components/Board/Cell/DisplayCell/AnimatedDigit.tsx","components/Board/Cell/DisplayCell/DisplayCell.tsx","components/Board/Cell/EditCell/EditCell.styles.tsx","components/Board/Cell/EditCell/EditCell.tsx","components/Board/Board.tsx","components/Controls/ButtonControl.tsx","components/Controls/SwitchControl.tsx","components/Controls/SliderControl.tsx","components/Controls/Controls.tsx","components/SudokuSolver.tsx","hooks/useUpdate.ts","hooks/useInterval.ts","components/Instructions/InstructionModal.tsx","components/Instructions/Pages/Introduction.tsx","components/Instructions/Pages/HowToInput.tsx","components/Instructions/Pages/RandomBoard.tsx","components/Instructions/Pages/QuickSolve.tsx","components/Instructions/Pages/VisualSolve.tsx","components/Instructions/Pages/ColorCode.tsx","components/Instructions/Pages/index.tsx","components/Instructions/Instructions.tsx","App.tsx","index.tsx"],"names":["theme","extendTheme","withDefaultColorScheme","colorScheme","fonts","heading","base","createBoard","Array","from","fill","digit","state","useBoard","currentUpdate","useState","board","setBoard","useEffect","prevBoard","map","boardRow","rowIdx","cellDigit","columnIdx","row","column","updateBoard","setCell","useCallback","SudokuBoardManager","rows","columns","regions","generateSolvableBoard","n","resetBoard","cellSeed","randomDigit","r","c","increment","candidate","decrementColumn","removeDigit","canPlaceCoordinate","placeDigit","incrementColumn","i","this","Set","has","getRegion","add","delete","stack","length","pop","push","updates","Math","floor","random","borderColor","StyledBoard","styled","div","CellStateColor","CellCss","css","props","StyledDisplayCell","AnimatedDigit","AnimatePresence","motion","initial","y","opacity","animate","exit","DisplayCell","React","memo","StyledEditCell","EditCell","updateCell","clearMessage","type","value","onChange","e","text","char","charAt","test","parseInt","onTextChange","target","onBlur","inputMode","Board","boardState","cell","ButtonControl","generateBoard","solve","pause","resume","clear","variant","size","isAttached","onClick","isDisabled","SwitchControl","visualSolveEnabled","toggleVisualSolve","display","color","fontWeight","isChecked","SliderControl","solveSpeed","setSpeed","width","mr","min","max","defaultValue","onChangeEnd","speed","Controls","buttonProps","sliderProps","mt","spacing","direction","alignItems","justifyContent","SudokuSolver","toast","useToast","position","isClosable","boardManager","useRef","setBoardState","isSolving","setIsSolving","setVisualSolveEnabled","solveInterval","setSolveInterval","setUpdates","setCurrentUpdate","index","setIndex","resetUpdateList","updateList","idx","useUpdate","setUpdateList","incrementUpdate","callback","delay","savedCallback","useLayoutEffect","current","id","setInterval","clearInterval","useInterval","processUpdates","title","status","duration","closeAll","h","flexDirection","bg","prev","visualSolve","sps","dropIn","hidden","visible","tranition","InstructionModal","header","children","prevPage","nextPage","useDisclosure","defaultIsOpen","isOpen","onClose","variants","Introduction","w","src","alt","HowToInput","fontSize","RandomBoard","QuickSolve","VisualSolve","ColorCode","pages","content","Instructions","page","setPage","currPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.820ba21a.chunk.js","sourcesContent":["import \"@fontsource/play\";\nimport { extendTheme, withDefaultColorScheme, theme as base } from '@chakra-ui/react';\n\nconst theme = extendTheme(\n  withDefaultColorScheme({\n    colorScheme: 'red'\n  }), {\n    fonts: {\n      heading: `Play, ${base.fonts.heading}`\n    }\n  }\n);\n\nexport default theme;","import { CellDigit } from './types';\n\nconst BOARD_SIZE = 9;\n\nconst createBoard = (): CellDigit[][] => Array.from(Array(BOARD_SIZE), () => new Array(BOARD_SIZE).fill({digit: 0, state: 'default'}));\n\nexport { BOARD_SIZE, createBoard };","import { useState, useEffect, useCallback } from \"react\";\n\nimport { createBoard } from '../lib/boardHelper';\nimport { CellDigit, CellUpdate} from '../lib/types';\n\nconst useBoard = (currentUpdate: CellUpdate | null) => {\n  const [board, setBoard] = useState(createBoard());\n\n  useEffect(() =>  {\n    if (!currentUpdate || currentUpdate === 'solved' || currentUpdate === 'unsolvable') {\n      return;\n    }\n\n    const updateBoard = (prevBoard: CellDigit[][]) => {\n      const newBoard = prevBoard.map((boardRow, rowIdx) => {\n        return boardRow.map((cellDigit, columnIdx) => {\n          return (rowIdx === currentUpdate.row && columnIdx === currentUpdate.column ? {digit: currentUpdate.digit, state: currentUpdate.state} : {...cellDigit, state: 'default'}) as CellDigit;\n        });\n      });\n\n      return newBoard;\n    };\n\n    setBoard(prevBoard => updateBoard(prevBoard));\n  }, [currentUpdate]);\n\n  const setCell = useCallback((row: number, column: number, digit: number) => {\n    setBoard(prevBoard => prevBoard.map((boardRow, rowIdx) => {\n      return boardRow.map((cellDigit, columnIdx) => {\n        return (rowIdx === row && columnIdx === column ? { digit: digit, state: 'default' } : cellDigit) as CellDigit;\n      });\n    }));\n  }, []);\n\n  const resetBoard = () => {\n    setBoard(createBoard());\n  };\n\n  return [board, setBoard, setCell, resetBoard] as const;\n};\n\nexport { useBoard };","import { CellUpdate } from './types';\n\n// row, column, digit\ntype CellDigit = [number, number, number];\n\nclass SudokuBoardManager {\n  board: number[][];\n  rows: Set<number>[];\n  columns: Set<number>[];\n  regions: Set<number>[];\n\n  constructor() {\n    this.board = Array.from(Array(9), () => new Array(9).fill(0));\n    this.rows = Array.from(Array(9), () => new Set());\n    this.columns = Array.from(Array(9), () => new Set());\n    this.regions = Array.from(Array(9), () => new Set());\n  }\n\n  resetBoard() {\n    this.board = Array.from(Array(9), () => new Array(9).fill(0));\n    this.rows = Array.from(Array(9), () => new Set());\n    this.columns = Array.from(Array(9), () => new Set());\n    this.regions = Array.from(Array(9), () => new Set());\n  }\n\n  canPlaceCoordinate(row: number, column: number, digit: number): boolean {\n    return !this.rows[row].has(digit) && !this.columns[column].has(digit) && !this.regions[getRegion(row, column)].has(digit);\n  }\n\n  placeDigit(row: number, column: number, digit: number): void {\n    this.board[row][column] = digit;\n    this.rows[row].add(digit);\n    this.columns[column].add(digit);\n    this.regions[getRegion(row, column)].add(digit);\n  }\n\n  removeDigit(row: number, column: number): void {\n    this.rows[row].delete(this.board[row][column]);\n    this.columns[column].delete(this.board[row][column]);\n    this.regions[getRegion(row, column)].delete(this.board[row][column]);\n\n    this.board[row][column] = 0;\n  }\n\n  solve(): boolean {\n    const stack: CellDigit[] = [];\n    let r: number = 0;\n    let c: number = 0;\n    let candidate: number = 1;\n\n    while (r < 9 && c < 9) {\n      if (this.board[r][c]) {\n        [r, c] = incrementColumn(r, c);\n      } else if (candidate > 9) {\n        if (!stack.length) {\n          return false;\n        }\n\n        [r, c, candidate] = stack.pop()!;\n        this.removeDigit(r, c);\n        candidate += 1;\n      } else if (!this.canPlaceCoordinate(r, c, candidate)) {\n        candidate += 1;\n      } else {\n        this.placeDigit(r, c, candidate);\n        stack.push([r, c, candidate]);\n        candidate = 1;\n        [r, c] = incrementColumn(r, c);\n      }\n    }\n\n    return true;\n  }\n\n  visualSolve(): CellUpdate[] {\n    const stack: CellDigit[] = [];\n    let r: number = 0;\n    let c: number = 0;\n    let candidate: number = 1;\n\n    const updates: CellUpdate[] = [];\n\n    while (r < 9 && c < 9) {\n      if (this.board[r][c]) {\n        [r, c] = incrementColumn(r, c);\n      } else if (candidate > 9) {\n        updates.push({ row: r, column: c, digit: 0, state: 'backtrack' });\n\n        if (!stack.length) {\n          updates.push('unsolvable');\n          return updates;\n        }\n\n        [r, c, candidate] = stack.pop()!;\n        this.removeDigit(r, c);\n        candidate += 1;\n      } else if (!this.canPlaceCoordinate(r, c, candidate)) {\n        updates.push({ row: r, column: c, digit: candidate, state: 'skip_over_digit' });\n        candidate += 1;\n      } else {\n        this.placeDigit(r, c, candidate);\n        stack.push([r, c, candidate]);\n        updates.push({ row: r, column: c, digit: candidate, state: 'place_digit' });\n        candidate = 1;\n        [r, c] = incrementColumn(r, c);\n      }\n    }\n\n    updates.push('solved');\n    return updates;\n  }\n\n  // generate fully solved board randomly and remove digits\n  generateSolvableBoard = (n: number) => {\n    this.resetBoard();\n\n    // generate seed (random digit between 0 and 8) and increment (starting at 0, going up to 8) for each cell\n    // cell candidate = (seed + increment) % 9 + 1\n    const cellSeed = Array.from(Array(9), () => new Array(9).fill(0).map(() => [randomDigit(), 0]));\n\n    let r: number = 0;\n    let c: number = 0;\n\n    while (r < 9 && c < 9) {\n      const increment = cellSeed[r][c][1];\n      const candidate = (cellSeed[r][c][0] + increment) % 9 + 1;\n\n      if (increment > 8) { // tried all digits in this cell, backtrack to previous cell\n        cellSeed[r][c][1] = 0;\n\n        [r, c] = decrementColumn(r, c);\n        this.removeDigit(r, c);\n        cellSeed[r][c][1]++;\n      } else if (!this.canPlaceCoordinate(r, c, candidate)) {\n        cellSeed[r][c][1]++;\n      } else {\n        this.placeDigit(r, c, candidate);\n        [r, c] = incrementColumn(r, c);\n      }\n    }\n\n    // remove 81 - n digits from board randomly\n    for (let i = 0; i < 81 - n; i++) {\n      do {\n        [r, c] = [randomDigit(), randomDigit()];\n      } while (this.board[r][c] === 0);\n\n      this.removeDigit(r, c);\n    }\n  }\n}\n\nconst randomDigit = () => {\n  return Math.floor(Math.random() * 9);\n};\n\nconst getRegion = (row: number, column: number): number => Math.floor(row / 3) * 3 + Math.floor(column / 3);\n\nconst incrementColumn = (row: number, column: number): [number, number] => column < 8 ? [row, column + 1] : [row + 1, 0];\n\nconst decrementColumn = (row: number, column: number): [number, number] => column > 0 ? [row, column - 1] : [row - 1, 8];\n\nexport default SudokuBoardManager;","const borderColor = 'black';\n\nexport { borderColor };","import styled from 'styled-components';\n\nimport { BOARD_SIZE } from '../../lib/boardHelper';\nimport { borderColor } from '../shared/styles';\n\nconst StyledBoard = styled.div`\n  display: grid;\n  grid-template-rows: repeat(${BOARD_SIZE}, calc(70vmin / ${BOARD_SIZE}));\n  grid-template-columns: repeat(${BOARD_SIZE}, 1fr);\n  width: 70vmin;\n  border: solid 3px ${borderColor};\n`;\n\nexport { StyledBoard };","import { css } from 'styled-components';\n\nimport { CellState } from '../../../lib/types';\nimport { borderColor } from '../../shared/styles';\n\nconst CellStateColor: { [key in CellState]: string } = {\n  'default': '227, 230, 217',\n  'place_digit': '144, 238, 144',\n  'skip_over_digit': '251, 236, 93',\n  'backtrack': '248, 131, 121'\n};\n\nexport type CellCssProps = {\n  row: number;\n  column: number;\n};\n\nconst CellCss = css<CellCssProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  background-color: rgba(227, 230, 217, 0.749);\n\n  font-size: 1.25em;\n  font-weight: 500;\n\n  border: 1px solid ${borderColor};\n  border-bottom: ${props => (props.row === 2 || props.row === 5) ? `3px solid ${borderColor}` : `1px solid ${borderColor}`};\n  border-right: ${props => (props.column === 2 || props.column === 5) ? `3px solid ${borderColor}` : `1px solid ${borderColor}`};\n`;\n\nexport { CellStateColor, CellCss };","import styled from 'styled-components';\n\nimport { CellState } from '../../../../lib/types';\nimport { CellStateColor, CellCss, CellCssProps } from '../styles';\n\ntype StyledDisplayCellProps = CellCssProps & {\n  state: CellState;\n};\n\nconst StyledDisplayCell = styled.div<StyledDisplayCellProps>`\n  ${CellCss};\n  background-color: rgba(${props => CellStateColor[props.state]}, 0.75);\n`;\n\nexport { StyledDisplayCell };\n","import { motion, AnimatePresence } from 'framer-motion';\n\ntype AnimatedDigitProps = {\n  digit: number;\n};\n\nconst AnimatedDigit = ({ digit }: AnimatedDigitProps) => {\n  return (\n    <AnimatePresence>\n      {digit && (\n        <motion.div\n          initial={{ y: -10, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          exit={{ y: -10, opacity: 0 }}\n        >\n          {digit}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default AnimatedDigit;\n","import React from 'react';\n\nimport { CellState } from '../../../../lib/types';\nimport { StyledDisplayCell } from './DisplayCell.styles';\nimport AnimatedDigit from './AnimatedDigit';\n\ntype DisplayCellProps = {\n  row: number;\n  column: number;\n  digit: number;\n  state: CellState;\n};\n\nconst DisplayCell = ({ row, column, digit, state }: DisplayCellProps) => (\n  <StyledDisplayCell row={row} column={column} state={state}>\n    {state === 'default' ? (\n      <>\n        {digit || ''}\n      </>\n    ) : (\n      <AnimatedDigit digit={digit}/>\n    )}\n  </StyledDisplayCell>\n);\n\nexport default React.memo(DisplayCell);","import styled from 'styled-components';\n\nimport { CellStateColor, CellCss } from '../styles';\n\nconst StyledEditCell = styled.div`\n  ${CellCss};\n\n  &:hover {\n    background-color: rgba(${CellStateColor['default']}, 0.5);\n    }\n\n  &:focus-within {\n    background-color: rgba(${CellStateColor['default']}, 0.25);\n  }\n\n  input {\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    text-align: center;\n    border-width: 0;\n    background-color: inherit;\n\n    color: inherit;\n    font: inherit;\n    appearance: none;\n    border-radius: 0;\n\n    outline: none;\n  }\n`;\n\nexport { StyledEditCell };","import { StyledEditCell } from './EditCell.styles';\n\ntype EditCellProps = {\n  row: number;\n  column: number;\n  digit: number;\n  updateCell: (row: number, column: number, digit: number) => void;\n  clearMessage: () => void;\n};\n\nconst EditCell = ({ row, column, digit, updateCell, clearMessage}: EditCellProps) => {\n  const onTextChange = (text: string): void => {\n    clearMessage();\n    const char = text.charAt(text.length - 1);\n\n    // match a single digit or an empty string\n    if (/^[1-9]$|^$/.test(char)) {\n      updateCell(row, column, parseInt(char) || 0);\n    }\n  };\n\n  return (\n    <StyledEditCell row={row} column={column}>\n      <input\n          type='text'\n          value={digit || ''}\n          onChange={e => onTextChange(e.target.value)}\n          onBlur={() => clearMessage()}\n          inputMode='numeric'\n        />\n    </StyledEditCell>\n  );\n};\n\nexport default EditCell;","import { BoardState, CellDigit } from '../../lib/types';\n\nimport { StyledBoard } from './Board.styles';\n\nimport DisplayCell from './Cell/DisplayCell/DisplayCell';\nimport EditCell from './Cell/EditCell/EditCell';\n\ntype BoardProps = {\n  board: CellDigit[][];\n  boardState: BoardState;\n  updateCell: (row: number, column: number, digit: number) => void;\n  clearMessage: () => void;\n};\n\nconst Board = ({ board, boardState, updateCell, clearMessage }: BoardProps) => (\n  <StyledBoard>\n    {\n      boardState === 'default' ? (\n        board.map((row, rowIdx) => row.map((cell, columnIdx) =>\n          <EditCell\n            key={`${rowIdx}${columnIdx}`}\n            row={rowIdx}\n            column={columnIdx}\n            digit={cell.digit}\n            updateCell={updateCell}\n            clearMessage={clearMessage}\n          />\n        ))\n      ) : (\n        board.map((row, rowIdx) => row.map((cell, columnIdx) =>\n          <DisplayCell\n            key={`${rowIdx}${columnIdx}`}\n            row={rowIdx}\n            column={columnIdx}\n            digit={cell.digit}\n            state={cell.state}\n          />\n        ))\n      )\n    }\n  </StyledBoard>\n);\n\nexport default Board;","import { Button, ButtonGroup } from '@chakra-ui/react';\n\nimport { BoardState } from '../../lib/types';\n\ntype ButtonControlProps = {\n  boardState: BoardState,\n  generateBoard: () => void,\n  solve: () => void,\n  pause: () => void,\n  resume: () => void,\n  clear: () => void\n};\n\nconst ButtonControl = ({ boardState, generateBoard, solve, pause, resume, clear }: ButtonControlProps) => {\n  return (\n    <>\n      <ButtonGroup variant='solid' size='sm' isAttached>\n        <Button onClick={generateBoard} isDisabled={boardState !== 'default'}>Random Board</Button>\n        <Button onClick={solve} isDisabled={boardState !== 'default'}>Solve</Button>\n        <Button onClick={boardState === 'solving' ? pause : resume} isDisabled={boardState !== 'solving' && boardState !== 'paused' }>\n          {boardState === 'solving' ? 'Pause' : 'Resume'}</Button>\n        <Button onClick={clear}>Reset</Button>\n      </ButtonGroup>\n    </>\n  );\n};\n\nexport default ButtonControl;","import { Switch } from '@chakra-ui/react';\n\nimport { BoardState } from '../../lib/types';\n\ntype SwitchControlProps = {\n  boardState: BoardState,\n  visualSolveEnabled: boolean,\n  toggleVisualSolve: () => void\n};\n\nconst SwitchControl = ({ boardState, visualSolveEnabled, toggleVisualSolve }: SwitchControlProps) => (\n  <Switch display='flex' color='white' fontWeight='bold' isChecked={visualSolveEnabled} onChange={toggleVisualSolve} isDisabled={boardState !== 'default'}>Show Solve?</Switch>\n);\n\nexport default SwitchControl;\n","import {\n  Flex,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  Text\n} from '@chakra-ui/react';\n\ntype SliderControlProps = {\n  solveSpeed: number,\n  setSpeed: (sps: number) => void\n};\n\nconst SliderControl = ({ solveSpeed, setSpeed }: SliderControlProps) => (\n  <Flex width='100%'>\n    <Text mr='5' color='white' fontWeight='bold'>Speed:</Text>\n    <Slider min={1} max={100} defaultValue={solveSpeed} onChangeEnd={(speed) => setSpeed(speed)}>\n      <SliderTrack>\n        <SliderFilledTrack />\n      </SliderTrack>\n      <SliderThumb />\n    </Slider>\n  </Flex>\n);\n\nexport default SliderControl;\n","import { VStack, Stack } from '@chakra-ui/react';\n\nimport { BoardState } from '../../lib/types';\nimport ButtonControl from './ButtonControl';\nimport SwitchControl from './SwitchControl';\nimport SliderControl from './SliderControl';\n\ntype ControlsProps = {\n  boardState: BoardState,\n  visualSolveEnabled: boolean,\n  toggleVisualSolve: () => void,\n  buttonProps: {\n    generateBoard: () => void,\n    solve: () => void,\n    pause: () => void,\n    resume: () => void,\n    clear: () => void\n  },\n  sliderProps: {\n    solveSpeed: number,\n    setSpeed: (sps: number) => void\n  }\n};\n\nconst Controls = ({ boardState, visualSolveEnabled, toggleVisualSolve, buttonProps, sliderProps }: ControlsProps) => {\n  return (\n    <VStack width='70vmin' mt='7' spacing='5'>\n      <Stack width='100%' direction={['column', 'row']} alignItems='center' justifyContent='space-between'>\n        <ButtonControl boardState={boardState} { ...buttonProps } />\n        <SwitchControl boardState={boardState} visualSolveEnabled={visualSolveEnabled} toggleVisualSolve={toggleVisualSolve} />\n      </Stack>\n\n      {visualSolveEnabled && (\n        <SliderControl { ...sliderProps } />\n      )}\n    </VStack>\n  );\n};\n\nexport default Controls;","import { useState, useRef } from 'react';\nimport { Flex, useToast, Heading } from '@chakra-ui/react';\n\n// custom hooks\nimport { useBoard } from '../hooks/useBoard';\nimport { useInterval } from '../hooks/useInterval';\nimport { useUpdate } from '../hooks/useUpdate';\n\n// helper\nimport SudokuBoardManager from '../lib/sudokuBoardManager';\nimport { BoardState } from '../lib/types';\n\n// components\nimport Board from './Board/Board';\nimport Controls from './Controls/Controls';\n\nconst SudokuSolver = () => {\n  const toast = useToast({\n    position: 'top-right',\n    variant: 'subtle',\n    isClosable: true\n  });\n  const boardManager = useRef(new SudokuBoardManager());\n\n  const [boardState, setBoardState] = useState<BoardState>('default');\n  const [isSolving, setIsSolving] = useState(false);\n  const [visualSolveEnabled, setVisualSolveEnabled] = useState(false);\n  const [solveInterval, setSolveInterval] = useState(250);\n\n  const [currentUpdate, setUpdateList, resetUpdateList, incrementUpdate] = useUpdate();\n  const [board, setBoard, setCell, resetBoard] = useBoard(currentUpdate);\n\n  useInterval(() => {\n    processUpdates();\n  }, isSolving ? solveInterval : null);\n\n  const processUpdates = () => {\n    incrementUpdate();\n\n    if (currentUpdate === 'solved') {\n      setBoardState('finished');\n      setIsSolving(false);\n\n      clearMessage();\n      toast({\n        title: 'Solved!',\n        status: 'success'\n      });\n    } else if (currentUpdate === 'unsolvable') {\n      setBoardState('finished');\n      setIsSolving(false);\n\n      clearMessage();\n      toast({\n        title: 'Board is unsolvable!',\n        status: 'error'\n      });\n    }\n  };\n\n  const pause = () => {\n    setBoardState('paused');\n    setIsSolving(false);\n    toast.closeAll();\n  };\n\n  const resume = () => {\n    setBoardState('solving');\n    setIsSolving(true);\n\n    clearMessage();\n    toast({\n      title: 'Solving...',\n      status: 'info',\n      isClosable: false,\n      duration: null\n    });\n  };\n\n  const quickSolve = () => {\n    const solved = boardManager.current.solve();\n\n    if (solved) {\n      setBoard(boardManager.current.board.map((row, rowIdx) => row.map((digit, columnIdx) => ({ row: rowIdx,column: columnIdx, digit, state: 'default'}))));\n      setBoardState('finished');\n\n      clearMessage();\n      toast({\n        title: 'Solved!',\n        status: 'success'\n      });\n    } else {\n      setBoardState('finished');\n\n      clearMessage();\n      toast({\n        title: 'Board is unsolvable!',\n        status: 'error'\n      });\n    }\n  };\n\n  const visualSolve = () => {\n    setUpdateList(boardManager.current.visualSolve());\n    resume();\n  };\n\n  const solve = () => {\n    if (visualSolveEnabled) {\n      visualSolve();\n    } else {\n      quickSolve();\n    }\n  };\n\n  const clear = () => {\n    setBoardState('default');\n    resetBoard();\n    clearMessage();\n    boardManager.current = new SudokuBoardManager();\n    resetUpdateList();\n    setIsSolving(false);\n  };\n\n  const clearMessage = () => {\n    toast.closeAll();\n  };\n\n  const updateCell = (row: number, column: number, digit: number) => {\n    if (digit === 0) {\n      boardManager.current.removeDigit(row, column);\n      setCell(row, column, digit);\n    }\n    else if (boardManager.current.canPlaceCoordinate(row, column, digit)) {\n      boardManager.current.removeDigit(row, column);\n      boardManager.current.placeDigit(row, column, digit);\n      setCell(row, column, digit);\n    } else if (boardManager.current.board[row][column] !== digit) {\n      clearMessage();\n      toast({\n        title: `${digit} already exists in this row, column, or region`,\n        status: 'error'\n      });\n    }\n  };\n\n  const generateBoard = () => {\n    boardManager.current.generateSolvableBoard(17);\n    setBoard(boardManager.current.board.map((row, rowIdx) => row.map((digit, columnIdx) => ({ row: rowIdx,column: columnIdx, digit, state: 'default'}))));\n  };\n\n  const toggleVisualSolve = () => {\n    setVisualSolveEnabled(prev => !prev);\n  };\n\n  const setSpeed = (sps: number) => {\n    setSolveInterval(1000 / sps);\n  };\n\n  return (\n    <Flex h='100vh' flexDirection='column' justifyContent='center' bg='darkslategray'>\n      <Flex h='10%' justifyContent='center' alignItems='center'>\n        <Heading color='white'>Sudoku Solver</Heading>\n      </Flex>\n      <Flex justifyContent='center' alignItems='center'>\n        <Board\n            board={board}\n            boardState={boardState}\n            updateCell={updateCell}\n            clearMessage={clearMessage}\n        />\n      </Flex>\n        {/* solveSpeed={1000 / solveInterval} */}\n      <Flex h='20%' justifyContent='center'>\n        <Controls\n          boardState={boardState}\n          visualSolveEnabled={visualSolveEnabled}\n          toggleVisualSolve={toggleVisualSolve}\n          buttonProps={{ generateBoard, solve, pause, resume, clear }}\n          sliderProps={{ solveSpeed: 1000 / solveInterval, setSpeed }}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default SudokuSolver;","import { useState, useCallback } from 'react';\n\nimport { CellUpdate } from '../lib/types';\n\nconst useUpdate = () => {\n  const [updates, setUpdates] = useState<CellUpdate[]>([]);\n  const [currentUpdate, setCurrentUpdate] = useState<CellUpdate | null>(null);\n  const [index, setIndex] = useState(-1);\n\n  const setUpdateList = (updateList: CellUpdate[]) => {\n    setUpdates(updateList);\n    setCurrentUpdate(updateList[0]);\n    setIndex(0);\n  };\n\n  const resetUpdateList = useCallback(() => {\n    setUpdates([]);\n    setCurrentUpdate(null);\n    setIndex(-1);\n  }, []);\n\n  const incrementUpdate = () => {\n    setIndex(idx => idx + 1);\n\n    if (!updates[index]) {\n      resetUpdateList();\n    } else {\n      setCurrentUpdate(updates[index]);\n    }\n  };\n\n  return [currentUpdate, setUpdateList, resetUpdateList, incrementUpdate] as const;\n};\n\nexport { useUpdate };","import { useEffect, useLayoutEffect, useRef } from 'react';\n\nconst useInterval = (callback: () => void, delay: number | null) => {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n};\n\nexport { useInterval };","import {\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  VStack,\n  Button,\n  ButtonGroup\n} from '@chakra-ui/react';\nimport { ArrowBackIcon, ArrowForwardIcon} from '@chakra-ui/icons';\n\nconst dropIn = {\n  hidden: {\n    y: '-100vh',\n    opacity: 0\n  },\n  visible: {\n    y: '0',\n    opacity: 1,\n    tranition: {\n      duration:  '0.1',\n      type: 'spring'\n    }\n  },\n  exit: {\n    y: '100vh',\n    opacity: 0,\n    tranition: {\n      duration:  '0.3'\n    }\n  }\n};\n\ntype ModalProps = {\n  header: string;\n  children: React.ReactNode;\n  prevPage: () => void;\n  nextPage: () => void;\n};\n\nconst InstructionModal = ({ header, children, prevPage, nextPage }: ModalProps) => {\n  const { isOpen, onClose } = useDisclosure({ defaultIsOpen: true });\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size='xl'>\n      <ModalOverlay />\n\n      <ModalContent\n        variants={dropIn}\n        initial='hidden'\n        animate='visible'\n        exit='exit'\n      >\n        <ModalHeader>{header}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing='7'>\n            {children}\n          </VStack>\n        </ModalBody>\n\n        <ModalFooter>\n          <ButtonGroup>\n            <Button onClick={prevPage}>\n              <ArrowBackIcon />\n            </Button>\n            <Button onClick={nextPage}>\n              <ArrowForwardIcon />\n            </Button>\n          </ButtonGroup>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default InstructionModal;","import { Flex, Text, Image } from '@chakra-ui/react';\n\nconst Introduction = () => (\n  <>\n    <Text>\n      This quick tutorial will walk you through all the features of this application.\n    </Text>\n\n    <Flex w='100%' justifyContent='space-around'>\n      <Image w='40%' src='https://via.placeholder.com/200.png' alt='placeholder'/>\n      <Image w='40%' src='https://via.placeholder.com/200.png' alt='placeholder'/>\n    </Flex>\n  </>\n);\n\nexport default Introduction;","import { Text, Image } from '@chakra-ui/react';\n\nconst HowToInput = () => (\n  <>\n    <Text>\n      Start by entering digits into the board. Click on a cell and enter a digit between 1 and 9.\n    </Text>\n    <Image w='60%' src='https://via.placeholder.com/200.png' alt='placeholder'/>\n    <Text fontSize='xs' color='tomato'>\n      *Digits may not be duplicated across any row, column, or region.\n    </Text>\n  </>\n);\n\nexport default HowToInput;","import { Text, Image } from '@chakra-ui/react';\n\nconst RandomBoard = () => (\n  <>\n    <Text>\n      Alternatively, you can click on 'Random Board' to have the application generate a board for you.\n    </Text>\n    <Image w='60%' src='https://via.placeholder.com/200.png' alt='placeholder'/>\n  </>\n);\n\nexport default RandomBoard;","import { Text, Image } from '@chakra-ui/react';\n\nconst QuickSolve = () => (\n  <>\n    <Text>\n      Next, click 'Solve' to instantly solve your sudoku puzzle!\n    </Text>\n    <Image w='60%' src='https://via.placeholder.com/200.png' alt='placeholder'/>\n  </>\n);\n\nexport default QuickSolve;","import { Flex, Text, Image } from '@chakra-ui/react';\n\nconst VisualSolve = () => (\n  <>\n    <Text>\n      Alternatively, toggle on the 'Show Solve?' switch to see how the puzzle is being solved under the hood.\n    </Text>\n\n    <Flex w='100%' justifyContent='space-around'>\n      <Image w='40%' src='https://via.placeholder.com/200.png' alt='placeholder'/>\n      <Image w='40%' src='https://via.placeholder.com/200.png' alt='placeholder'/>\n    </Flex>\n\n    <Text>\n      Play around with the slider that appears below to adjust the speed of the solve.\n    </Text>\n\n    <Text fontSize='xs'>\n      *This application utilizes a backtracking algorithm to determine a solution to the puzzle.\n    </Text>\n  </>\n);\n\n\nexport default VisualSolve;","import { Flex, Text, Image } from '@chakra-ui/react';\n\nconst ColorCode = () => (\n  <>\n    <Text>\n      While solving with the 'Show Solve?' mode toggled on, you may notice that cells are colored in a certain way.\n    </Text>\n\n    <Flex alignItems='center' justifyContent='space-between'>\n      <Image w='15%' src='https://via.placeholder.com/200.png/90ee90' alt='success'/>\n      <Text w='75%' fontSize='sm'>\n        Green indicates that a possible digit has been found! Place digit and move on to the next cell.\n      </Text>\n    </Flex>\n\n    <Flex alignItems='center' justifyContent='space-between'>\n      <Image w='15%' src='https://via.placeholder.com/200.png/fbeb5d' alt='skip'/>\n      <Text w='75%' fontSize='sm'>\n        Yellow indicates that the digit conflicts with another cell in this row, column, or region. Try next digit.\n      </Text>\n    </Flex>\n\n    <Flex alignItems='center' justifyContent='space-between'>\n      <Image w='15%' src='https://via.placeholder.com/200.png/f88479' alt='backtrack'/>\n      <Text w='75%' fontSize='sm'>\n        Red indicates that no digits can go into this cell. Backtrack.\n      </Text>\n    </Flex>\n  </>\n);\n\nexport default ColorCode;","import Introduction from './Introduction';\nimport HowToInput from './HowToInput';\nimport RandomBoard from './RandomBoard';\nimport QuickSolve from './QuickSolve';\nimport VisualSolve from './VisualSolve';\nimport ColorCode from './ColorCode';\n\nconst pages = [{\n  header: 'Welcome to Sudoku Solver!',\n  content: <Introduction />\n}, {\n  header: 'How to Begin',\n  content: <HowToInput />\n}, {\n  header: 'Random Board',\n  content: <RandomBoard />\n}, {\n  header: 'Quick Solve',\n  content: <QuickSolve />\n}, {\n  header: 'Visual Solve',\n  content: <VisualSolve />\n}, {\n  header: 'Color Code',\n  content: <ColorCode />\n}];\n\nexport { pages };","import { useState } from 'react';\n\nimport InstructionModal from './InstructionModal';\nimport { pages } from './Pages';\n\nconst Instructions = () => {\n  const [page, setPage] = useState(0);\n\n  const prevPage = () => {\n    setPage(currPage => (currPage + pages.length - 1) % pages.length);\n  };\n\n  const nextPage = () => {\n    setPage(currPage => (currPage + 1) % pages.length);\n  };\n\n  return (\n    <InstructionModal header={pages[page].header} prevPage={prevPage} nextPage={nextPage}>\n      {pages[page].content}\n    </InstructionModal>\n  );\n};\n\nexport default Instructions;","import { ChakraProvider } from '@chakra-ui/react';\n\nimport theme from './theme';\n\nimport SudokuSolver from './components/SudokuSolver';\nimport Instructions from './components/Instructions/Instructions';\n\nconst App = () => (\n  <ChakraProvider theme={theme}>\n    <SudokuSolver />\n    <Instructions />\n  </ChakraProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}